package recursion;//ÊñêÊ≥¢ÈÇ£Â•ëÊï∞ÔºåÈÄöÂ∏∏Áî® F(n) Ë°®Á§∫ÔºåÂΩ¢ÊàêÁöÑÂ∫èÂàóÁß∞‰∏∫ÊñêÊ≥¢ÈÇ£Â•ëÊï∞Âàó„ÄÇËØ•Êï∞ÂàóÁî± 0 Âíå 1 ÂºÄÂßãÔºåÂêéÈù¢ÁöÑÊØè‰∏ÄÈ°πÊï∞Â≠óÈÉΩÊòØÂâçÈù¢‰∏§È°πÊï∞Â≠óÁöÑÂíå„ÄÇ‰πüÂ∞±ÊòØÔºö
//
// F(0) = 0,¬† ¬†F(1)¬†= 1
//F(N) = F(N - 1) + F(N - 2), ÂÖ∂‰∏≠ N > 1.
// 
//
// ÁªôÂÆö NÔºåËÆ°ÁÆó F(N)„ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
//
// ËæìÂÖ•Ôºö2
//ËæìÂá∫Ôºö1
//Ëß£ÈáäÔºöF(2) = F(1) + F(0) = 1 + 0 = 1.
// 
//
// Á§∫‰æã 2Ôºö 
//
// ËæìÂÖ•Ôºö3
//ËæìÂá∫Ôºö2
//Ëß£ÈáäÔºöF(3) = F(2) + F(1) = 1 + 1 = 2.
// 
//
// Á§∫‰æã 3Ôºö 
//
// ËæìÂÖ•Ôºö4
//ËæìÂá∫Ôºö3
//Ëß£ÈáäÔºöF(4) = F(3) + F(2) = 2 + 1 = 3.
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// 0 ‚â§ N ‚â§ 30 
// 
// Related Topics Êï∞ÁªÑ 
// üëç 181 üëé 0


import org.junit.Test;

import java.util.Base64;

//leetcode submit region begin(Prohibit modification and deletion)
public class ÁõÆÊ†áÂíå {
    private Integer[] dp;

    public int fib(int n) {
        dp = new Integer[n + 1];
        return helper(n);
    }

    private int helper(int n) {
        if (n == 0) return 0;
        if (n == 1 || n == 2) return 1;
        if (dp[n] != null) return dp[n];
        int sum = helper(n - 1) + helper(n - 2);
        dp[n] = sum;
        return sum;
    }

    @Test
    public void test() {
        java.lang.String s =
                "";
        String decode = new java.lang.String(Base64.getDecoder().decode(s));

        System.out.println(decode);
    }
}
//leetcode submit region end(Prohibit modification and deletion)
